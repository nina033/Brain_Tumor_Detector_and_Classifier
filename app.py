import streamlit as st
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
import plotly.graph_objects as go
import cv2
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Flatten
from tensorflow.keras.optimizers import Adamax
from tensorflow.keras.metrics import Precision, Recall
import google.generativeai as genai
import PIL.Image
import os
from dotenv import load_dotenv

load_dotenv()

genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

output_dir = 'saliency_maps'
os.makedirs(output_dir, exist_ok=True)

def generate_explanation(img_path, model_prediction, confidence):
    prompt = f"""You are an expert neurologist. You are tasked with explaining a saliency map of a brain tumor MRI scan.
    The saliency map was generated by a deep learning model that was trained to classify brain tumors as either glioma, meningioma, pituitary, or no tumor.

    The saliency map highlights the regions of the image that the machine learning model is focusing on to make the prediction.

    The deep learning model predicted the image to be of class '{model_prediction}' with a confidence of {confidence * 100}%.
    
    In your response:
    - Explain what regions of the brain the model is focusing on, based on the saliency map. Refer to the regions highlighted in light cyan, those are the regions where the model is focusing on.
    - Explain possible reasons why the model made the prediction it did.
    - Generate a comprehensive but concise report that includes the model's prediction but additional insights like comparison with historical cases, treatment patient can get and potential next steps for the patient and doctor. Each section should have a heading.
    - Donâ€™t mention anything like 'The saliency map highlights the regions the model is focusing on, which are in light cyan' in your explanation.
    - Never assume. And for next steps always start with suggestion to see medical professional if tumor and then give the rest of the suggested next steps.
    - Keep your explanation to 12 sentences max.

    Let's think step by step about this. Verify step by step.
    """

    img = PIL.Image.open(img_path)

    model = genai.GenerativeModel(model_name="gemini-1.5-flash")
    response = model.generate_content([prompt, img])

    return response.text

def generate_saliency_map(model, img_array, class_index, img_size):
    with tf.GradientTape() as tape:
        img_tensor = tf.convert_to_tensor(img_array)
        tape.watch(img_tensor)
        predictions = model(img_tensor)
        target_class = predictions[:, class_index]
      
    gradients = tape.gradient(target_class, img_tensor)
    gradients = tf.math.abs(gradients)
    gradients = tf.reduce_max(gradients, axis=-1)
    gradients = gradients.numpy().squeeze()

    # Resize gradients to match original image size
    gradients = cv2.resize(gradients, img_size)

    # Create a circular mask for the brain area
    center = (gradients.shape[0] // 2, gradients.shape[1] // 2)
    radius = min(center[0], center[1]) - 10 
    y, x = np.ogrid[:gradients.shape[0], :gradients.shape[1]]
    mask = (x - center[0])**2 + (y - center[1])**2 <=radius**2

    # Apply mask to gradientss
    gradients = gradients * mask 

    # Normalize only the brain area
    brain_gradients = gradients[mask]
    if brain_gradients.max() > brain_gradients.min():
        brain_gradients = (brain_gradients - brain_gradients.min()) / (brain_gradients.max() - brain_gradients.min())
    gradients[mask] = brain_gradients

    # Apply mask to gradients 
    gradients = gradients * mask

    # Normalize only the brain area 
    brain_gradients = gradients[mask]
    if brain_gradients.max() > brain_gradients.min():
      brain_gradients = (brain_gradients - brain_gradients.min()) / (brain_gradients.max() - brain_gradients.min())
    gradients[mask] = brain_gradients

    #Apply a higher threshold
    threshold = np.percentile(gradients[mask], 80)
    gradients[gradients < threshold] = 0

    #Apply more agressive smoothing 
    gradients = cv2.GaussianBlur(gradients, (11, 11), 0)

    #Create a heatmap overlay with enhanced contrast 
    heatmap = cv2.applyColorMap(np.uint8(255 * gradients), cv2.COLORMAP_JET)
    heatmap = cv2.cvtColor(heatmap, cv2.COLOR_BGR2RGB)

    # Resize heatmap to match original image size
    heatmap = cv2.resize(heatmap, img_size)

    # Superimpose the heatmap on original image with increased opacity 
    original_img = image.img_to_array(img)
    superimposed_img = heatmap * 0.7 + original_img * 0.3
    superimposed_img = superimposed_img.astype(np.uint8)

    img_path = os.path.join(output_dir, uploaded_file.name)
    with open(img_path, "wb") as f:
        f.write(uploaded_file.getbuffer())

    saliency_map_path = f'saliency_maps/{uploaded_file.name}'

    # Save the saliency app
    cv2.imwrite(saliency_map_path, cv2.cvtColor(superimposed_img, cv2.COLOR_RGB2BGR))

    return superimposed_img


def load_xception_model(model_path):
    img_shape = (299, 299, 3)

    base_model = tf.keras.applications.Xception(include_top= False,weights= "imagenet",
                                              input_shape= img_shape, pooling= 'max')

    model = Sequential([
        base_model,
        Flatten(),
        Dropout(rate= 0.3),
        Dense(128, activation= 'relu'),
        Dropout(rate= 0.25),
        Dense(4, activation= 'softmax')
    ])

    model.build((None,) + img_shape)

    model.compile(Adamax(learning_rate= 0.001),
                  loss= 'categorical_crossentropy',
                  metrics=['accuracy',
                  Precision(),
                  Recall()])
    
    model.load_weights(model_path)
    return model

st.title("ðŸ§  Brain Tumor Detection and Classification Tool")

st.write("Please upload a clear, high-resolution MRI scan for detection and classification")

uploaded_file = st.file_uploader("Choose an MRI Brain Scan to Analyze...", type=["jpg", "jpeg", "png"])

st.markdown(
    """
    <style>
    div[data-baseweb="radio"] > div {
        font-size: 20px;  /* Change the font size */
    }
    </style>
    """,
    unsafe_allow_html=True,
)

if uploaded_file is not None:

  selected_model = st.radio(
      "Select Model",
      ("Transfer Learning - Xception", "Custom CNN")
  )

  if selected_model == "Transfer Learning - Xception":
      model = load_xception_model('xception_model_one.weights.h5')
      img_size = (299, 299)

  else:
      model = load_model('cnn_model.h5')
      img_size = (224, 224)

  labels = ['Glioma', 'Meningioma', 'No tumor', 'Pituitary']
  img = image.load_img(uploaded_file, target_size=img_size)
  img_array = image.img_to_array(img)
  img_array = np.expand_dims(img_array, axis=0)
  img_array /= 255.0

  prediction = model.predict(img_array)

  # Get the class with the highest probability
  class_index = np.argmax(prediction[0])
  result = labels[class_index]

  #st.write(f"Predicted Class: {result}")
  #st.markdown(f"## Predicted Class: {result}")
  st.markdown(f"<h2 style='text-align: center; color: #FF5733;'> Predicted Class: {result}</h2>", unsafe_allow_html=True)
  confidence = prediction[0][class_index]
  st.write(f"### Confidence: {confidence:.2%}")

  # Add progress bar for confidence
  st.progress(int(confidence * 100))
  st.write("### Predictions:")
  for label, prob in zip(labels, prediction[0]):
      st.write(f"{label}: {prob:.4f}")

  saliency_map = generate_saliency_map(model, img_array, class_index, img_size)

  # Custom styling for captions
  st.markdown(
      """
      <style>
      .image-caption {
          font-size: 24px; 
          font-weight: bold;
          color: #FFFFFF; 
          text-align: center;
      }
      </style>
      """,
      unsafe_allow_html=True,
  )

  col1, col2 = st.columns(2)
  with col1:
    st.image(uploaded_file, caption='', use_container_width=True)  # No caption here
    # Custom caption with larger text
    st.markdown('<p class="image-caption">Uploaded Image</p>', unsafe_allow_html=True)

  with col2:
    st.image(saliency_map, caption='', use_container_width=True)  # No caption here
    # Custom caption with larger text
    st.markdown('<p class="image-caption">Saliency Map</p>', unsafe_allow_html=True)

  
  st.write("## Classification Results")

  result_container = st.container()
  result_container = st.container()
  result_container.markdown(
        f"""
        <div style="background-color: #000000; color: #ffffff; padding: 30px; border-radius: 15px;">
           <div style="display: flex; justify-content: space-between; align-items: center;">
              <div style="flex: 1; text-align: center;">
                  <h3 style="color: #ffffff; margin-bottom: 10px; font-size: 20px;">Predictions</h3> 
                  <p style="font-size: 36px; font-weight: 800; color: #FF0000; margin: 0;">
                        {result}
                  </p> 
              </div>
              <div style="width: 2px; height: 80px; background-color: #ffffff; margin: 0 20px;"></div>
              <div style="flex: 1; text-align: center;">
                  <h3 style="color: #ffffff; margin-bottom: 10px; font-size: 20px;">Confidence</h3> 
                  <p style="font-size: 36px; font-weight: 800; color: #2196F3; margin: 0;">
                      {prediction[0][class_index]:.4%}
                  </p> 
              </div>
          </div>
        </div>
        """,
        unsafe_allow_html=True
  )

  # Prepare data for Plotly chart
  probabilities = prediction[0]
  sorted_indices = np.argsort(probabilities)[::-1]
  sorted_labels = [labels[i] for i in sorted_indices]
  sorted_probabilities = probabilities[sorted_indices]

  # Create a Plotly bar chart 
  fig = go.Figure(go.Bar(
      x=sorted_probabilities,
      y=sorted_labels,
      orientation='h',
      marker_color=['red' if label == result else 'blue' for label in sorted_labels]
  ))

  # Customize the chart layout
  fig.update_layout(
      title='Probabilities for each class',
      title_font=dict(size=24),  # Increase title font size
      xaxis_title='Probability',
      xaxis_title_font=dict(size=18),  # Increase x-axis label font size
      yaxis_title='Class',
      yaxis_title_font=dict(size=18),  # Increase y-axis label font size
      height=400,
      width=600,
      yaxis=dict(autorange="reversed"),
      font=dict(size=14)  # Global font size for the entire chart
  )

  # Add value labels to the bars with increased font size
  for i, prob in enumerate(sorted_probabilities):
      fig.add_annotation(
          x=prob,
          y=i,
          text=f'{prob:.4f}',
          showarrow=False,
          xanchor='left',
          xshift=5,
          font=dict(size=16)  # Increase annotation font size
      )


  #Display the plotly chart
  st.plotly_chart(fig)

  # Prepare data for Radar chart
  categories = labels  # Class labels
  values = prediction[0]  # Model prediction probabilities

  # Create a radar chart figure
  fig_radar = go.Figure(data=go.Scatterpolar(
      r=values,  # The values of the radar chart (predicted probabilities)
      theta=categories,  # The classes (labels) for the chart
      fill='toself',  # Fill the area under the chart
      line=dict(color='blue', width=2),
      marker=dict(size=5),
      name='Prediction Probabilities'
  ))

  # Customize layout for better presentation
  fig_radar.update_layout(
      polar=dict(
          radialaxis=dict(
              visible=True,
              range=[0, 1],  # Range from 0 to 1 for probabilities
              tickfont=dict(color='black')
          ),
      ),
      title='Model Prediction Probabilities',
      title_font=dict(size=24),  # Increase title font size
      font=dict(size=14),  # Global font size
      showlegend=False  # Hide legend
  )

  # Display the radar chart in Streamlit
  st.plotly_chart(fig_radar)

  saliency_map_path = f'saliency_maps/{uploaded_file.name}'
  explanation = generate_explanation(saliency_map_path, result, prediction[0][class_index])

  st.write("## Explanation")
  st.write(explanation)

